CS 221 Project Updates
Wednesday, December 9th; 4:05 AM

1. We reorganized the file system. Executables (i.e. anything with a main() function) are in the ‘bin’ folder. Libraries (i.e. anything you import with the intention of using its variables/functions and not to ‘run’ it) are in the ‘lib’ folder. Resources (i.e. anything that is read/written to) are in the ‘res’ folder. The file system is now organized like a python package. Your main.py file was renamed to query_online_db.py and is in the ‘bin’ folder

2. Running executables is slightly different now. The end goal is to be in the root repo folder and be able to run everything as a complete package like this “python -m recipe_writer <executable_to_run> <arguments_to_that_executable>”. There are a few bugs right now, but this works:
	Let’s say you called your repo folder cs221-project. You want to cd into cs221-project/recipe-writer and run everything from there.
	When you’re in this folder, run an executable like this:
		“python __main__.py query_online_db”
		“python __main__.py process_recipes”

3. We implemented the process_recipes.py executable, which takes a JSON file filled with recipe data and outputs a JSON file (in res/aliasdata) filled with associations between ingredient names (which I call ‘aliases’). The three relations I track right now are: 1. The total number of times that alias has been seen in recipes, 2. A dictionary where the keys are other aliases this alias has been seen with (keys are its “alias buddies”) and the values are the number of times the alias has been seen with that alias buddy, 3. A list of ingredient lines that alias has been associated with.

4. We implemented threading in query_online_db (which was main.py previously), which makes queries to Yummly go a lot faster. 	Alex will likely be able to have all the recipes downloaded by the end of the night. After this is done, we can easily merge the resulting JSON recipe files into a mega-all-recipes JSON file.

5. We came up with some great ideas for next steps. These are all stored in recipe_writer/ideas.txt. Our favorite ideas are the factor graph / CSP ones. We think those will end up being the coolest. For example, this algorithm would be able to give someone a list of sub-100 calorie recipes that were vegan and nut-allergy free and composed of less than 20% fat. All of this will be handled in bin/write_recipes.py